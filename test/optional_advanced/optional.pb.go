// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: optional.proto

package optional

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_test_custom "github.com/gogo/protobuf/test/custom"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OptMessage struct {
	MyParam     *bool                                         `protobuf:"varint,1,opt,name=my_param,json=myParam,proto3,oneof" json:"my_param,omitempty"`
	VintParam   *int32                                        `protobuf:"varint,2,opt,name=vint_param,json=vintParam,proto3,oneof" json:"vint_param,omitempty"`
	VlongParam  *int64                                        `protobuf:"varint,3,opt,name=vlong_param,json=vlongParam,proto3,oneof" json:"vlong_param,omitempty"`
	IntParam    *uint32                                       `protobuf:"fixed32,4,opt,name=int_param,json=intParam,proto3,oneof" json:"int_param,omitempty"`
	LongParam   *uint64                                       `protobuf:"fixed64,5,opt,name=long_param,json=longParam,proto3,oneof" json:"long_param,omitempty"`
	DoubleParam *float64                                      `protobuf:"fixed64,6,opt,name=double_param,json=doubleParam,proto3,oneof" json:"double_param,omitempty"`
	StringParam *string                                       `protobuf:"bytes,7,opt,name=string_param,json=stringParam,proto3,oneof" json:"string_param,omitempty"`
	BytesParam  []byte                                        `protobuf:"bytes,8,opt,name=bytes_param,json=bytesParam,proto3,oneof" json:"bytes_param,omitempty"`
	CustomParam *github_com_gogo_protobuf_test_custom.Uint128 `protobuf:"bytes,9,opt,name=custom_param,json=customParam,proto3,oneof,customtype=github.com/gogo/protobuf/test/custom.Uint128" json:"custom_param,omitempty"`
	// Non-nullable optional?
	MsgParam *OptMessage_Embedded `protobuf:"bytes,10,opt,name=msg_param,json=msgParam,proto3,oneof" json:"msg_param,omitempty"`
}

func (m *OptMessage) Reset()         { *m = OptMessage{} }
func (m *OptMessage) String() string { return proto.CompactTextString(m) }
func (*OptMessage) ProtoMessage()    {}
func (*OptMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_905cd112a63783c0, []int{0}
}
func (m *OptMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptMessage.Merge(m, src)
}
func (m *OptMessage) XXX_Size() int {
	return m.Size()
}
func (m *OptMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_OptMessage.DiscardUnknown(m)
}

var xxx_messageInfo_OptMessage proto.InternalMessageInfo

func (m *OptMessage) GetMyParam() bool {
	if m != nil {
		return *m.MyParam
	}
	return false
}

func (m *OptMessage) GetVintParam() int32 {
	if m != nil {
		return *m.VintParam
	}
	return 0
}

func (m *OptMessage) GetVlongParam() int64 {
	if m != nil {
		return *m.VlongParam
	}
	return 0
}

func (m *OptMessage) GetIntParam() uint32 {
	if m != nil {
		return *m.IntParam
	}
	return 0
}

func (m *OptMessage) GetLongParam() uint64 {
	if m != nil {
		return *m.LongParam
	}
	return 0
}

func (m *OptMessage) GetDoubleParam() float64 {
	if m != nil {
		return *m.DoubleParam
	}
	return 0
}

func (m *OptMessage) GetStringParam() string {
	if m != nil {
		return *m.StringParam
	}
	return ""
}

func (m *OptMessage) GetBytesParam() []byte {
	if m != nil {
		return m.BytesParam
	}
	return nil
}

func (m *OptMessage) GetMsgParam() *OptMessage_Embedded {
	if m != nil {
		return m.MsgParam
	}
	return nil
}

type OptMessage_Embedded struct {
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *OptMessage_Embedded) Reset()         { *m = OptMessage_Embedded{} }
func (m *OptMessage_Embedded) String() string { return proto.CompactTextString(m) }
func (*OptMessage_Embedded) ProtoMessage()    {}
func (*OptMessage_Embedded) Descriptor() ([]byte, []int) {
	return fileDescriptor_905cd112a63783c0, []int{0, 0}
}
func (m *OptMessage_Embedded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptMessage_Embedded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptMessage_Embedded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptMessage_Embedded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptMessage_Embedded.Merge(m, src)
}
func (m *OptMessage_Embedded) XXX_Size() int {
	return m.Size()
}
func (m *OptMessage_Embedded) XXX_DiscardUnknown() {
	xxx_messageInfo_OptMessage_Embedded.DiscardUnknown(m)
}

var xxx_messageInfo_OptMessage_Embedded proto.InternalMessageInfo

func (m *OptMessage_Embedded) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*OptMessage)(nil), "optional.OptMessage")
	proto.RegisterType((*OptMessage_Embedded)(nil), "optional.OptMessage.Embedded")
}

func init() { proto.RegisterFile("optional.proto", fileDescriptor_905cd112a63783c0) }

var fileDescriptor_905cd112a63783c0 = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x8b, 0xd3, 0x40,
	0x14, 0xc6, 0xfb, 0xb6, 0x9b, 0x36, 0x79, 0xc9, 0xae, 0x50, 0x3c, 0x2c, 0x0b, 0xc6, 0xa1, 0x88,
	0xcc, 0x41, 0x53, 0x5d, 0x2f, 0xde, 0x84, 0x80, 0x30, 0x17, 0x51, 0x06, 0x04, 0x6f, 0x21, 0xd9,
	0x8e, 0x31, 0xd0, 0xe9, 0x94, 0xce, 0xa4, 0xd0, 0xff, 0x40, 0x6f, 0xfe, 0x59, 0x1e, 0x7b, 0x14,
	0x0f, 0x22, 0xed, 0x3f, 0x22, 0x9d, 0xa4, 0xd3, 0xf1, 0xe0, 0x6d, 0xde, 0xf7, 0x7e, 0xf3, 0x31,
	0xf3, 0x7d, 0x78, 0xad, 0x56, 0xa6, 0x51, 0xcb, 0x72, 0x91, 0xad, 0xd6, 0xca, 0xa8, 0x49, 0x78,
	0x9a, 0x6f, 0x9f, 0xd7, 0x8d, 0xf9, 0xd2, 0x56, 0xd9, 0xbd, 0x92, 0xb3, 0x5a, 0xd5, 0x6a, 0x66,
	0x81, 0xaa, 0xfd, 0x6c, 0x27, 0x3b, 0xd8, 0x53, 0x77, 0x71, 0xfa, 0x2d, 0x40, 0x7c, 0xbf, 0x32,
	0xef, 0x84, 0xd6, 0x65, 0x2d, 0x26, 0x29, 0x86, 0x72, 0x5b, 0xac, 0xca, 0x75, 0x29, 0x6f, 0x80,
	0x00, 0x0d, 0xd9, 0x80, 0x8f, 0xe5, 0xf6, 0xc3, 0x51, 0xf8, 0x0a, 0x30, 0x99, 0x22, 0x6e, 0x9a,
	0xa5, 0xe9, 0x89, 0x0b, 0x02, 0x34, 0x60, 0xc0, 0xa3, 0xa3, 0xe6, 0x98, 0x27, 0x18, 0x6f, 0x16,
	0x6a, 0x59, 0xf7, 0xd0, 0x90, 0x00, 0x1d, 0xb2, 0x0b, 0x8e, 0x56, 0x74, 0x14, 0xc1, 0xe8, 0x6c,
	0x74, 0x49, 0x80, 0x8e, 0xd9, 0x90, 0x87, 0xbe, 0xcf, 0x14, 0xd1, 0xb3, 0x09, 0x08, 0xd0, 0x11,
	0xbb, 0xe4, 0xd1, 0x3f, 0x2e, 0x4f, 0x31, 0x99, 0xab, 0xb6, 0x5a, 0x88, 0x9e, 0x1a, 0x11, 0xa0,
	0xc0, 0x02, 0x1e, 0x77, 0xaa, 0xcf, 0x69, 0xb3, 0x6e, 0x9c, 0xdb, 0x98, 0x00, 0x8d, 0xd8, 0x88,
	0xc7, 0x9d, 0xea, 0xbf, 0xbd, 0xda, 0x1a, 0xa1, 0x7b, 0x2c, 0x24, 0x40, 0x13, 0x36, 0xe6, 0x68,
	0x45, 0x47, 0x7d, 0xc2, 0xe4, 0xbe, 0xd5, 0x46, 0xc9, 0x1e, 0x8b, 0x8e, 0x58, 0xfe, 0xe2, 0xd7,
	0xef, 0xc7, 0xcf, 0xfe, 0x9b, 0xbe, 0x11, 0xda, 0xcc, 0xba, 0x5b, 0xd9, 0xc7, 0x66, 0x69, 0x5e,
	0xde, 0xbd, 0x66, 0x21, 0x8f, 0x3b, 0xc5, 0x39, 0xbf, 0xc1, 0x48, 0xea, 0xd3, 0x23, 0x91, 0x00,
	0x8d, 0xef, 0x1e, 0x65, 0xae, 0xeb, 0x73, 0x51, 0xd9, 0x5b, 0x59, 0x89, 0xf9, 0x5c, 0xcc, 0x59,
	0xc4, 0x43, 0xa9, 0xdd, 0x07, 0x6e, 0x09, 0x86, 0xa7, 0xd5, 0xe4, 0x21, 0x06, 0x9b, 0x72, 0xd1,
	0x0a, 0xdb, 0x64, 0xc0, 0xbb, 0x21, 0x8f, 0x31, 0x2a, 0x4e, 0x1d, 0xe7, 0x57, 0x18, 0x17, 0xe7,
	0x42, 0xf3, 0x6b, 0x4c, 0x0a, 0xaf, 0xbb, 0x3c, 0x41, 0x2c, 0xce, 0xdb, 0x23, 0xec, 0x2d, 0x1f,
	0xe0, 0x55, 0xe1, 0x87, 0x6f, 0x05, 0x3f, 0x65, 0x6b, 0xe7, 0xc5, 0x69, 0x01, 0x3f, 0x38, 0xeb,
	0xef, 0xfe, 0x9b, 0xdf, 0xfc, 0xd8, 0xa7, 0xb0, 0xdb, 0xa7, 0xf0, 0x67, 0x9f, 0xc2, 0xf7, 0x43,
	0x3a, 0xd8, 0x1d, 0xd2, 0xc1, 0xcf, 0x43, 0x3a, 0xa8, 0x46, 0x36, 0xc6, 0x57, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x58, 0x26, 0x97, 0xec, 0xf7, 0x02, 0x00, 0x00,
}

func (m *OptMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgParam != nil {
		{
			size, err := m.MsgParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOptional(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.CustomParam != nil {
		{
			size := m.CustomParam.Size()
			i -= size
			if _, err := m.CustomParam.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintOptional(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.BytesParam != nil {
		i -= len(m.BytesParam)
		copy(dAtA[i:], m.BytesParam)
		i = encodeVarintOptional(dAtA, i, uint64(len(m.BytesParam)))
		i--
		dAtA[i] = 0x42
	}
	if m.StringParam != nil {
		i -= len(*m.StringParam)
		copy(dAtA[i:], *m.StringParam)
		i = encodeVarintOptional(dAtA, i, uint64(len(*m.StringParam)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DoubleParam != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.DoubleParam))))
		i--
		dAtA[i] = 0x31
	}
	if m.LongParam != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(*m.LongParam))
		i--
		dAtA[i] = 0x29
	}
	if m.IntParam != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(*m.IntParam))
		i--
		dAtA[i] = 0x25
	}
	if m.VlongParam != nil {
		i = encodeVarintOptional(dAtA, i, uint64(*m.VlongParam))
		i--
		dAtA[i] = 0x18
	}
	if m.VintParam != nil {
		i = encodeVarintOptional(dAtA, i, uint64(*m.VintParam))
		i--
		dAtA[i] = 0x10
	}
	if m.MyParam != nil {
		i--
		if *m.MyParam {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OptMessage_Embedded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptMessage_Embedded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptMessage_Embedded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintOptional(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOptional(dAtA []byte, offset int, v uint64) int {
	offset -= sovOptional(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OptMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MyParam != nil {
		n += 2
	}
	if m.VintParam != nil {
		n += 1 + sovOptional(uint64(*m.VintParam))
	}
	if m.VlongParam != nil {
		n += 1 + sovOptional(uint64(*m.VlongParam))
	}
	if m.IntParam != nil {
		n += 5
	}
	if m.LongParam != nil {
		n += 9
	}
	if m.DoubleParam != nil {
		n += 9
	}
	if m.StringParam != nil {
		l = len(*m.StringParam)
		n += 1 + l + sovOptional(uint64(l))
	}
	if m.BytesParam != nil {
		l = len(m.BytesParam)
		if l > 0 {
			n += 1 + l + sovOptional(uint64(l))
		}
	}
	if m.CustomParam != nil {
		l = m.CustomParam.Size()
		n += 1 + l + sovOptional(uint64(l))
	}
	if m.MsgParam != nil {
		l = m.MsgParam.Size()
		n += 1 + l + sovOptional(uint64(l))
	}
	return n
}

func (m *OptMessage_Embedded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovOptional(uint64(m.Value))
	}
	return n
}

func sovOptional(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOptional(x uint64) (n int) {
	return sovOptional(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OptMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptional
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyParam", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.MyParam = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VintParam", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VintParam = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlongParam", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VlongParam = &v
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntParam", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.IntParam = &v
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongParam", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LongParam = &v
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleParam", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.DoubleParam = &v2
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringParam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptional
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptional
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StringParam = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesParam", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptional
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptional
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BytesParam = append(m.BytesParam[:0], dAtA[iNdEx:postIndex]...)
			if m.BytesParam == nil {
				m.BytesParam = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomParam", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOptional
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOptional
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_gogo_protobuf_test_custom.Uint128
			m.CustomParam = &v
			if err := m.CustomParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptional
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptional
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgParam == nil {
				m.MsgParam = &OptMessage_Embedded{}
			}
			if err := m.MsgParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptional(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOptional
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptMessage_Embedded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptional
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Embedded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Embedded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOptional(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOptional
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOptional(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOptional
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptional
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptional
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOptional
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOptional
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOptional
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOptional        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOptional          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOptional = fmt.Errorf("proto: unexpected end of group")
)
